var GRCVendorRiskAssessmentRulesEngine = Class.create();
GRCVendorRiskAssessmentRulesEngine.prototype = {
	initialize: function () {
	},

	autoCreateDraftAssessmentWithTemplate: function (vendor) {
		if (this._hasActiveAssessment(vendor)) {
			return;
		}

		var DRAFT_STATE = 1;
		var SUBMITTED_STATE = 2;
		var CLOSED_STATE = 3;
		var CANCELLED_STATE = 7;

		var title = gs.getMessage("Auto generated risk assessment due to tier change for vendor {0}", [vendor.name]);

		var rule = this._getRule(vendor.vendor_tier.name, vendor.name);
		var template = (rule ? rule.template : null);
		this._cancelNonSubmittedAutoAssessments(vendor);
		var assessment = this._createAssessment(title, DRAFT_STATE, vendor, template, 'tier');
		if (rule) {
			// JSON does not handle the boolean from a GlideRecord well so we make sure it is defined here.
			// If we don't explicitly define it the JSON will encode it as an empty object {}.
			var auto_send = false;
			if (rule.auto_send) {
				this._sendAssessment(assessment);
				auto_send = true;
			}
			this._ruleTriggeredEmailManager(assessment, auto_send);
		}
		// Assessment BR has message when state changes to submitted so we don't have to handle that here.
		if (!this._checkAssessmentState(assessment, SUBMITTED_STATE))
			this._showManualUpdateMessage();
	},

	_getOldScore: function (score) {
		var gr = new GlideRecord('sn_vdr_risk_asmt_security_score');
		gr.addQuery('sys_id', '!=', score.sys_id + '');
		gr.addQuery('vendor', score.vendor + '');
		gr.addQuery('provider', score.provider + '');
		gr.orderByDesc('generated_on');
		gr.setLimit(1);
		gr.query();
		if (gr.next())
			return {
				'score': parseInt(gr.normalized_score),
				'rating': gr.normalized_rating
			};

		return null;
	},

	createTemplateAsPerTPSSRule: function (score /* GlideRecord */) {
		var vendor = new GlideRecord('core_company');
		if (!vendor.get(score.vendor + ''))
			return;

		var oldScore = 0;
		var oldRating = null;

		var oldValues = this._getOldScore(score);
		if (oldValues != null) {
			oldScore = oldValues.score;
			oldRating = oldValues.rating;
		}

		var actualChange = 0;
		var actualChangePercent = 0;
		var incDesc = '';
		var newScore = parseInt(score.normalized_score);
		var newRating = score.normalized_rating;

		// variation_type: increases_by, decreases_by or threshold
		// variation_type can only be one of the above three.
		if ((newScore > 0) && (oldScore > 0)) {
			incDesc = (newScore > oldScore) ? "increases_by" : "decreases_by";
			actualChange = Math.abs(newScore - oldScore);
			actualChangePercent = actualChange / oldScore * 100;
		}

		var gr = this._getTPSSRules(score.tier, score.provider, incDesc);
		while (gr.next()) {
			if (!gr.apply_to_vendors.nil() && !GlideFilter.checkRecord(vendor, gr.getValue('apply_to_vendors')))
				continue;

			var trigger = false;
			var basis = gr.change_type + '';
			var extent = gr.variation_type + '';

			if (basis == 'score') {  //Score basis
				var scoreOrChange = parseInt(gr.score + '');
				if (extent == 'threshold') {
					if (newScore >= scoreOrChange && (oldScore > 0 && oldScore < scoreOrChange))
						trigger = true;
				}
				else if (extent == incDesc) {
					if (actualChange >= scoreOrChange)
						trigger = true;
				}
			}
			else if (basis == 'percentage') { //For percentage basis
				if (extent == incDesc) {  //Check increase or decrease
					var percent = parseInt(gr.percentage + '');
					if (actualChangePercent >= percent)
						trigger = true;
				}
			}
			else { //Rating basis
				if (extent == 'threshold') {
					var threshold = parseInt(gr.risk_rating.value);
					var newRatingVal = parseInt(newRating.value);
					var oldRatingVal = parseInt(oldRating.value);

					if (newRatingVal <= threshold && oldRatingVal > threshold)  //Check threshold
						trigger = true;
				}
			}

			if (trigger) {
				var assessment;
				var hasPrimaryContact = this._vendorHasPrimaryContact(vendor);
				if (gr.send_assessment)
					assessment = this._createAndSendAssessment(gr, vendor, hasPrimaryContact);

				var issue;
				if (gr.send_issue)
					issue = this._createAndSendIssue(gr, vendor, hasPrimaryContact);

				var task;
				if (gr.send_task)
					task = this._createAndSendTask(gr, vendor, hasPrimaryContact);

				//Only send email if some action has taken place
				this._sendTriggerUpdateEmail(score, gr, assessment, issue, task, oldScore, newScore, oldRating, newRating);

				//Only apply one rule from the same provider and same extent of change, lowest ordered one proceeds.
				break;
			}
		}
	},

	_vendorHasPrimaryContact: function (vendor) {
		var gr = new GlideRecord('vm_vdr_contact');
		gr.addActiveQuery();
		gr.addQuery('company', vendor.getUniqueValue());
		gr.addQuery('primary_contact', true);
		gr.query();
		return gr.hasNext();		
	},
	
	_createAndSendAssessment: function (rule, vendor, hasPrimaryContact) {
		var DRAFT_STATE = 1;
		var SUBMITTED_STATE = 2;

		var shortDescription = gs.getMessage("Auto generated risk assessment for vendor {0} from provider-based submission rule {1} ({2}).", [vendor.name, rule.name, rule.provider.getDisplayValue()]);

		if (this._hasActiveScoreChangeAssessment(vendor, rule.template, shortDescription))
			return null;

		var assessment = this._createAssessment(shortDescription, DRAFT_STATE, vendor, rule.template, 'tpss');

		var msg = '';
		var sent = false;
		var assessmentUrl = '/sn_vdr_risk_asmt_assessment.do?sys_id=' + assessment.getUniqueValue();
		if (rule.auto_send && hasPrimaryContact) {
			if(null != this._sendAssessment(assessment))
				sent = true;
		}
		if(sent)
			msg = gs.getMessage("A new risk assessment has been sent to vendor {0}. Click <a href='{1}'>here</a> to view.", [vendor.name, assessmentUrl]);
		else
			msg = gs.getMessage("A new risk assessment has been created for vendor {0} but has not been sent to the vendor yet. Click <a href='{1}'>here</a> to view.", [vendor.name, assessmentUrl]);

		gs.addInfoMessage(msg);

		assessment.msg = msg;
		return assessment;
	},

	_createAndSendIssue: function (rule, vendor, hasPrimaryContact) {
		var ISSUE_STATE_NEW = 1;
		var ISSUE_STATE_SUBMITTED = 2;

		var shortDescription = gs.getMessage("Auto generated risk issue for vendor {0} from provider-based submission rule {1} ({2}).", [vendor.name, rule.name, rule.provider.getDisplayValue()]);
		if (this._hasActiveScoreChangeIssueOrTask('sn_vdr_risk_asmt_issue', vendor, shortDescription))
			return null;

		// create issue record
		var issue = new GlideRecord('sn_vdr_risk_asmt_issue');
		issue.vendor = vendor.getUniqueValue();

		// apply template
		if (!rule.issue_template.nil()) {
			var issueTemplate = new GlideTemplate.get(rule.issue_template);
			issueTemplate.apply(issue);
		}

		// Need to move from New => Submitted for BR validations
		issue.short_description = shortDescription;
		issue.state = ISSUE_STATE_NEW;
		issue.insert();

		// mandatory fields are not being checked for some reason so have to do it manually
		var msg = '';
		var sent = false;
		var issueUrl = '/sn_vdr_risk_asmt_issue.do?sys_id=' + issue.getUniqueValue();
		if (rule.auto_send && hasPrimaryContact && !rule.issue_template.nil() && !issue.response.nil() && !issue.explanation.nil()) {
			issue.state = ISSUE_STATE_SUBMITTED;
			issue.visible_in_vendor_portal = true;
			if(null != issue.update())
				sent = true;			
		}
		if(sent)
			msg = gs.getMessage("A new risk issue has been sent to vendor {0}. Click <a href='{1}'>here</a> to view.", [vendor.name, issueUrl]);
		else
			msg = gs.getMessage("A new risk issue has been created for vendor {0} but has not been sent to the vendor yet. Click <a href='{1}'>here</a> to view.", [vendor.name, issueUrl]);

		gs.addInfoMessage(msg);

		issue.msg = msg;
		return issue;
	},

	_createAndSendTask: function (rule, vendor, hasPrimaryContact) {
		var TASK_STATE_OPEN = 1;
		var TASK_STATE_SUBMITTED = 2;

		var shortDescription = gs.getMessage("Auto generated risk task for vendor {0} from provider-based submission rule {1} ({2}).", [vendor.name, rule.name, rule.provider.getDisplayValue()]);
		if (this._hasActiveScoreChangeIssueOrTask('sn_vdr_risk_asmt_task', vendor, shortDescription))
			return null;

		// create task record
		var task = new GlideRecord('sn_vdr_risk_asmt_task');
		task.vendor = vendor.getUniqueValue();

		// apply template
		if (!rule.task_template.nil()) {
			var taskTemplate = new GlideTemplate.get(rule.task_template);
			taskTemplate.apply(task);
		}

		// move from Open => Submitted for BR validations
		task.short_description = shortDescription;
		task.state = TASK_STATE_OPEN;
		task.insert();

		// will not auto send without a template
		var msg = '';
		var sent = false;
		var taskUrl = '/sn_vdr_risk_asmt_task.do?sys_id=' + task.getUniqueValue();
		if (rule.auto_send && hasPrimaryContact && !rule.task_template.nil()) {
			task.state = TASK_STATE_SUBMITTED;
			task.visible_in_vendor_portal = true;
			if(null != task.update())
				sent = true;			
		}		
		if(sent)
			msg = gs.getMessage("A new risk task has been sent to vendor {0}. Click <a href='{1}'>here</a> to view.", [vendor.name, taskUrl]);
		else
			msg = gs.getMessage("A new risk task has been created for vendor {0} but has not been sent to the vendor yet. Click <a href='{1}'>here</a> to view.", [vendor.name, taskUrl]);

		gs.addInfoMessage(msg);
		task.msg = msg;

		return task;
	},

	_sendTriggerUpdateEmail: function (score, rule, assessment, issue, task, oldScore, newScore, oldRating, newRating) {
		var msg = '';
		msg += gs.getMessage("Vendor {0} had a third-party score change that triggered provider-based submission rule {1} ({2}).<br>", [score.vendor.name, rule.name, rule.provider.getDisplayValue()]);

		msg += "<br>";
		if (oldScore > 0 || newScore > 0)
			msg += gs.getMessage('Normalized score changed from {0} to {1}.<br>', [oldScore + '', newScore + '']);
		if (oldRating.label != newRating.label)
			msg += gs.getMessage('Normalized rating changed from {0} to {1}.<br>', [oldRating.label, newRating.label]);
		msg += "<br>";

		msg += this._createActionMsg(rule, assessment, issue, task);
		gs.eventQueue("sn_vdr_risk_asmt.v_asmt_score_changed", rule, '', msg);
	},

	_createActionMsg: function (gr, assessment, issue, task) {
		var msg = '';

		if (gr.send_assessment && !gs.nil(assessment))
			msg += assessment.msg + '<br>';

		if (gr.send_issue && !gs.nil(issue))
			msg += issue.msg + '<br>';

		if (gr.send_task && !gs.nil(task))
			msg += task.msg + '<br>';

		return msg;
	},

	blockVendorTierFieldWrite: function (vendor) {
		// if has auto assessment and is not 'Draft'/'Closed'/'Canceled' make field not editable
		if (this._hasActiveAssessment(vendor))
			return true;

		// if has auto assessment and is 'Draft'/'Closed'/'Canceled' make field editable else return false
		return false;
	},

	hasActiveAssessment: function (vendor) {
		return this._hasActiveAssessment(vendor);
	},

	_getRule: function (tier, vendor) {
		// Allow either name or GlideRecord to be passed in and handled.
		if (tier instanceof GlideRecord)
			tier = tier.name;
		if (vendor instanceof GlideRecord)
			vendor = vendor.name;

		var gr = new GlideRecord("sn_vdr_risk_asmt_vendor_assessment_rule");
		gr.addEncodedQuery(this._buildQuery(tier, vendor));
		gr.orderByDesc("vendor.name");
		gr.addActiveQuery();
		gr.setLimit(1);
		gr.query();
		if (!gr.next())
			return null;

		return gr;
	},

	/**
	 * Function to create rules when the third party security score changes.
	 */
	_getTPSSRules: function (tier, provider, incDesc) {
		var gr = new GlideRecord("sn_vdr_risk_asmt_tpss_rule");
		gr.addEncodedQuery(this._buildTPSSQuery(tier, provider, incDesc));
		gr.orderBy('order');
		gr.addActiveQuery();
		gr.query();
		return gr;
	},

	/**
	 * Function to create the third party security score rules where clause.
	 */
	_buildTPSSQuery: function (tier, provider, variation) {
		var query = "variation_type=" + variation + "^ORvariation_type=threshold^";

		if (!gs.nil(tier))
			query += "tier=" + tier + "^";

		if (!gs.nil(provider))
			query += "provider=" + provider + "^";

		query += "ORproviderISEMPTY^";

		return query;
	},

	_buildQuery: function (tier, vendor) {
		var query = "tier.name=" + tier + "^";
		if (vendor)
			query += "vendor.name=" + vendor + "^OR";
		query += "vendor.nameISEMPTY";
		return query;
	},

	_createAssessment: function (title, state, vendor, template, createdFrom, engagement) {
		var assessment = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessment.newRecord();
		assessment.name = title;
		assessment.state = state;
		assessment.vendor = vendor.getUniqueValue();
		if (!gs.nil(engagement)) {
			assessment.applies_to = 'engagement';
			assessment.engagement = engagement.getUniqueValue();
		}

		if (template) {
			assessment.assessment_template = template;

			var temp = new GlideRecord('sn_vdr_risk_asmt_template');
			temp.get(template);

			if (temp.isValidRecord()) {
				assessment.setValue('description', temp.description);
				assessment.setValue('assessment_duration', temp.assessment_duration);
				assessment.setValue('questionnaire_duration', temp.questionnaire_duration);
				assessment.setValue('questionnaire_review_duration', temp.questionnaire_review_duration);
			}
		}

		//PRB1321535
		var newDuration = assessment.assessment_duration * 60000 * 60 * 24;
		assessment.duration.setDateNumericValue(newDuration);
		var end_date = new GlideDateTime(assessment.start_date);
		end_date.addDaysUTC(assessment.assessment_duration * 1);
		assessment.setValue('end_date', end_date);

		if (createdFrom == 'tier')
			assessment.triggered_by_vdr_tier = true;
		assessment.insert();
		return assessment;
	},

	_sendAssessment: function (assessment) {
		// assessment contains a BR that submits if state is set to 2.
		// This also carries out validation in the BR.
		if (assessment.state == 1) {
			// Fix for DEF0128785 - Included a read query before doing an update to state field
			var assessmentGr = new GlideRecord("sn_vdr_risk_asmt_assessment");
			assessmentGr.get(assessment.getUniqueValue());
			assessmentGr.state = 2;
			return assessmentGr.update();
		}
		return '';
	},

	_hasActiveAssessment: function (vendor) {
		var assessments = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessments.addQuery("vendor", vendor.getUniqueValue());
		assessments.addQuery("triggered_by_vdr_tier", true);
		assessments.addQuery("state", "!=", "1");
		assessments.addQuery("state", "!=", "3");
		assessments.addQuery("state", "!=", "7");
		assessments.query();
		return assessments.hasNext();
	},

	_hasActiveScoreChangeAssessment: function (vendor, template, title) {
		var lastMonth = new GlideDateTime();
		lastMonth.addMonthsUTC(-1);

		var assessments = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessments.addQuery("vendor", vendor.getUniqueValue());
		assessments.addQuery("name", title);
		assessments.addQuery("triggered_by_vdr_tier", false);
		assessments.addQuery("assessment_template", template);
		assessments.addQuery("sys_created_on", ">=", lastMonth);
		assessments.addActiveQuery();
		assessments.query();
		return assessments.hasNext();
	},

	_hasActiveScoreChangeIssueOrTask: function (table, vendor, shortDescription) {
		if (table != 'sn_vdr_risk_asmt_issue' && table != 'sn_vdr_risk_asmt_task')
			return;

		var lastMonth = new GlideDateTime();
		lastMonth.addMonthsUTC(-1);

		var issue = new GlideRecord(table);
		issue.addQuery('vendor', vendor.getUniqueValue());
		issue.addQuery('short_description', shortDescription);
		issue.addQuery('sys_created_on', '>=', lastMonth);
		issue.addActiveQuery();
		issue.query();

		return issue.hasNext();
	},

	_cancelNonSubmittedAutoAssessments: function (vendor) {
		var assessments = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessments.addQuery("vendor", vendor.getUniqueValue());
		assessments.addQuery("triggered_by_vdr_tier", true);
		assessments.addQuery("state", "!=", "3");
		assessments.addQuery("state", "!=", "7");
		assessments.query();
		while (assessments.next()) {
			assessments.state = 7;
			assessments.update();
		}
	},

	_checkAssessmentState: function (assessment, state) {
		var clone = new GlideRecord("sn_vdr_risk_asmt_assessment");
		if (clone.get(assessment.getUniqueValue()))
			return state == clone.getValue("state");
		return false;
	},

	_checkIssueState: function (issue, state) {
		var clone = new GlideRecord("sn_vdr_risk_asmt_issue");
		if (clone.get(issue.getUniqueValue()))
			return state == clone.getValue("state");
		return false;
	},

	_checkTaskState: function (task, state) {
		var clone = new GlideRecord("sn_vdr_risk_asmt_task");
		if (clone.get(task.getUniqueValue()))
			return state == clone.getValue("state");
		return false;
	},

	_ruleTriggeredEmailManager: function (assessment, send) {
		// JSON does not handle gliderecord fields so we need to make sure
		// we have copied the value into a var before encoding.
		var params = new global.JSON().encode({
			auto_send: send
		});
		gs.eventQueue("sn_vdr_risk_asmt.v_asmt_rule_triggered", assessment, params);
	},

	MANUAL_UPDATE_REQUIRED_MESSAGE: gs.getMessage("A new vendor risk assessment has been created due to vendor tier update. This assessment is in 'Draft' state and not yet submitted to the vendor."),

	autoCreateDraftAssessmentWithTemplateForEngagement: function (engagement) {
		if (this._hasActiveAssessmentForEngagement(engagement)) {
			return;
		}

		var DRAFT_STATE = 1;
		var SUBMITTED_STATE = 2;
		var CLOSED_STATE = 3;
		var CANCELLED_STATE = 7;

		var title = gs.getMessage("A new vendor risk assessment has been created for engagement {0} due to vendor tier change.", [engagement.name]);

		var rule = this._getRule(engagement.vendor_tier.name, engagement.vendor.name);
		var template = (rule ? rule.template : null);
		this._cancelNonSubmittedAutoAssessmentsForEngagement(engagement);

		var vendor = new GlideRecord('core_company');
		vendor.get(engagement.vendor);

		var assessment = this._createAssessment(title, DRAFT_STATE, vendor, template, 'engagement', engagement);
		if (rule) {
			// JSON does not handle the boolean from a GlideRecord well
			// so we make sure it is defined here.
			// If we don't explicitly define it the JSON
			// will encode it as an empty object {}.
			var auto_send = false;
			if (rule.auto_send) {
				this._sendAssessment(assessment);
				auto_send = true;
			}
			this._ruleTriggeredEmailManager(assessment, auto_send);
		}
		// Assessment BR has message when state changes to submitted
		// so we don't have to handle that here.
		if (!this._checkAssessmentState(assessment, SUBMITTED_STATE))
			gs.addInfoMessage(gs.getMessage("A new vendor risk assessment has been created due to engagement tier update. This assessment is in 'Draft' state and not yet submitted to the vendor."));
	},

	_hasActiveAssessmentForEngagement: function (engagement) {
		var assessments = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessments.addQuery("engagement", engagement.getUniqueValue());
		assessments.addQuery("state", "!=", "1");
		assessments.addQuery("state", "!=", "3");
		assessments.addQuery("state", "!=", "7");
		assessments.query();
		return assessments.hasNext();
	},

	_cancelNonSubmittedAutoAssessmentsForEngagement: function (engagement) {
		var assessments = new GlideRecord("sn_vdr_risk_asmt_assessment");
		assessments.addQuery("engagement", engagement.getUniqueValue());
		assessments.addQuery("state", "!=", "3");
		assessments.addQuery("state", "!=", "7");
		assessments.query();
		while (assessments.next()) {
			assessments.state = 7;
			assessments.update();
		}
	},

	_showManualUpdateMessage: function () {
		gs.addInfoMessage(this.MANUAL_UPDATE_REQUIRED_MESSAGE);
	},

	type: 'GRCVendorRiskAssessmentRulesEngine'
};
